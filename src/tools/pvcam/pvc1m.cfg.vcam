
# read by pvcam to set local options
# 1.0m camera

# used for testing only
$testMode = 1;
# ONLINE VERSION

# Turn on for informational messages in log
$traceon = 1;

# Turn on for verbose / debug messages in log (traceon must also be 1)
$verboseTrace = 1;

# Camera ID string
$id = "Pixel Vision 4kx2kx10";

#------------------------------------------------

# CCD Chip Grouping information
# This section defines the grouping of the chips to each slave computer
# and describes the offset relationship to the image as a whole
# The offsets are in arcminutes.
# Rotation bit codes are: (2 = hflip, 4 = vflip)
#	0 = no rotation or flip
#	1 = rotate left							-1 = rotate right
#	2 = flip horizontal
#	3 = flip horizontal then rotate left	-3 = flip horizontal then rotate right
#	4 = flip vertical
#	5 = flip vertical then rotate left 		-5 = flip vertical then rotate right
#   6 = flip both horizontal and vertical
#   7 = flip both ways then rotate left		-7 = flip both ways then rotate right
#
# NOTE: GROUP 0 MUST BE THE SKY MONITOR

$GroupInfo = [

# Group 0: Sky Monitor (computer A)
{ Name			=> "onem-1",			# name of the computer that receives this group
  Cmd			=> "pvslave_onem-1",		# name of script to run
  FilewaitDir 	=> "/home/steve/pvc1m/A/filewait",
  Size 			=> [ 256, 512 ],	# width and height of combined image file [ w,h ]
  SectionCuts 	=> [				# "name", "x y w h", offset, rotation for each section to cut	
			"k", "0 0 256 256", 28.528, 23.773, 0,
			"l", "0 256 256 256", -28.528, -23.773, 0,
				   ],				
},

# Group 1: Computer B
{ Name			=> "onem-2",			# name of the computer that receives this group
  Cmd			=> "pvslave_onem-2",		# name of script to run
  FilewaitDir 	=> "/home/steve/pvc1m/B/filewait",
  Size 			=> [ 2100, 840 ],	# width and height of combined image file
  SectionCuts 	=> [				# "name", "x y w h", offset, rotation for each section to cut	
		    "b1", "0 0 525 840", 22.298,11.9, 0,
	        "b2", "525 0 525 840", 7.4326,11.9, 0,
	    	"b3", "1050 0 525 840", -7.4326,11.9, 0,
	    	"b4", "1575 0 525 840",-22.298,11.9, 0,
  		    	   ],
},

# Group 2: Computer C
{ Name			=> "onem-3",			# name of the computer that receives this group
  Cmd			=> "pvslave_onem-3",		# name of script to run
  FilewaitDir 	=> "/home/steve/pvc1m/C/filewait",
  Size 			=> [ 1050, 1260],	# width and height of combined image file
  SectionCuts 	=> [				# "name", "x y w h", offset, rotation for each section to cut	
  			"c1", "0 840 1050 420", -14.865,0, 0,
		    "c2", "525 0 525 840", -22.298, -17.84, 0,
  		    "c3", "0 0 525 840", -7.4326, -17.84, 0,
  		    	   ],

},

# Group 3: Computer D
{ Name			=> "onem-4",			# name of the computer that receives this group
  Cmd			=> "pvslave_onem-4",		# name of script to run
  FilewaitDir 	=> "/home/steve/pvc1m/D/filewait",
  Size 			=> [ 1050, 1260 ],	# width and height of combined image file
  SectionCuts 	=> [				# "name", "x y w h", offset, rotation for each section to cut	
  			"d1", "0 0 525 840", 22.298, -17.84, 0,
  		    "d2", "525 0 525 840", 7.4326, -17.84, 0,
  		    "d3", "0 840 1050 420", 14.865, 0, 0,
  		    	   ],
}

];	# end of GroupInfo

#------------------------------------------------

# Information about return choices
# format: "cpuName", "cutFrame", offset, rotate
$ReturnInfo = [
 # Choice 0:
	# The west side of the center (C1)
	[ "onem-3", "0 840 420 420", -5.943, 0, 0 ],

 # Choice 1:
 	# The east side of the center (D3)
	[ "onem-4", "630 840 420 420", 5.943, 0, 0 ],
	
 # Choice 2:
	# Below center, split (B2 & B3)
	[ "onem-2", "630 0 420 420", 0, 8.915, 0 ],

 # Choice 3:
 	# The east sky monitor (A1)
	[ "onem-1", "0 0 256 256", 28.528, 23.773, 0 ],

 # Choice 4:
	# The west sky monitor (A2)
	[ "onem-1", "0 256 256 256", -28.528, -23.773, 0 ],

 # Choice 5:
	# Both sky monitors
	[ "onem-1", "0 0 256 512", 0, 0, 0 ]
	
]; # end of ReturnInfo

# Choice from above to use for return section
$ReturnChoice = 0;

# name of section that is returned to system
$ReturnName = "return";

# common file location where this is copied for return to system
# ($TELHOME/archive is common)
$ReturnImgFile = "$TELHOME/archive/pvrtn.fit";

# Enable groups: Set to 0 to disable a particular group (0-3)
@GroupEnable = (1,1,1,1);

# Set to 1 to make any flat images return a "fake" return component
$FakeFlats = 0;

# Set to 0 to disable post-processing script from running
$enablePostProcessing = 0;

#----------------------------------------------------

# names for temporary calibration files
$biasName = "bias";
$thermName = "therm";
$flatName = "flat";

# set to 1 to enable sky monitor, else 0
$useSkyMonitor = 1;

# set to 1 if sky monitor images should be stored
# or 0 if they should just be returned visually
$storeSkyMonitorImgs = 0;

# name of fifo sky monitor communicates with (in $TELHOME/comm)
$SkyListen = "SkyListen";

# ==========================

# fake temperature
$faketemp = -100;

$maxbx = 2;		# 3 causes pv software to choke
$maxby = 2;

# trigger LP bits
$lpshut = 0x1;		# LP data bit to activate Shutter
$lptrig = 0x2;		# LP data bit to activate Trigger

# how to run the lpio command
# and the stampfits command
# These run on slaves, so the command is direct:
$lpiocmd = "lpio";
$stampcmd = "stampfits";

# error file returned to master to signify error
# in common location ($TELHOME/archive is shared)
$msterr = "$TELHOME/archive/logs/pvslaverr.txt";

#$base = "/mdo/user/images"; 	# base name and path for output files
$base = "/home/steve/pvc1m/images";

# This must be in a location that can be seen by all the computers
# at the same pathname ($TELHOME/archive is shared)
$fitsnow = "$TELHOME/archive/fitsnow";  # temp file for placeholder fits header

# timeouts -- pertains to each group
$dlto = 240;		# time for camera to download image
$lanto = 30;	# max time to get image over lan

# err and trace log
# This also should be in a common place ($TELHOME/archive is shared)
$elog = "$TELHOME/archive/logs/pvc1m.log";

$skyMonitorTimeout = 60;
