#!/opt/local/bin/perl -- -*- ATF -*-
# atfmsched.pl: digest output from atfmsched.html and produce a report.
# Elwood Downey
# 12 Apr 96: begin
# 17 Jun 96: add code to check for valid obs id

# version number
$ver = 1.1;

require "cgi-lib-96.pl";
require "ctime.pl";

# number of rows in atfmsched.html form
$nrows = 5;

# output directory for completed sched file
$schdir = "/net/atf/usr/local/telescope/user/schedin/netin";
#$schdir = "/tmp";

# program to run to check submissions for accuracy.
# we use both its stdout and stderr as well as its exit status.
$chksch = "/usr/local/telescope/bin/chksch";


# Read in all the variables set by the form so we can access as $input{'name'}
&ReadParse(*input);

# Print the HTML header once
print "Content-type: text/html\n\n";
print "<html><head>\n";
print "<title>ATF Schedule Submission Check</title>\n";
print "</head>\n<body bgcolor=#ffffff text=#000000>\n";

# form basename of sched file in $schfnb and full path in $schfn
$daynr = `date '+%j'`;
$daynr =~ s/\n//g;	# strip \n from date call
$obc = $input{'Obscode'};
if ($obc eq "") {
    &errmsg ("Missing Observer code\n");
    goto wrapup;
}
`/net/inferno/export/brutus/Web/cgi-bin/obsok.pl "$obc"`;
if ($?) {
    &errmsg ("Invalid Observer code: $obc\n");
    goto wrapup;
}
$schfnb = "$obc$daynr.sch";
$schfn = "$schdir/$schfnb";

# check that there is a finite title 
$title = $input{'Title'};
if ("$title" eq "") {
    &errmsg ("Please include a title for later reference.\n");
    goto wrapup;
}

# allow only one request per day.
if (-e $schfn) {
    &errmsg ("Please, only one request per day; thank you.\n");
    goto wrapup;
}

# create the schedule file as file handle SF
if (!open (SF, ">$schfn")) {
    &errmsg ("Can not create $schfn\n");
    goto wrapup;
}

# put in the fixed initial fields
printf SF "! Generated by atfmsched.pl Version $ver\n";
printf SF "! From %s (%s)\n", $ENV{'REMOTE_HOST'}, $ENV{'REMOTE_ADDR'};
printf SF "! As Observer Code \"%s\"\n", $input{'Obscode'};
printf SF "! On %s", `date -u`;
printf SF "! With %s\n", $ENV{'HTTP_USER_AGENT'};
printf SF "\n";

printf SF "TITLE = '%s'\n", $input{"Title"};
printf SF "OBSERVER = '%s'\n", $input{'Observer'};

# now build the block/repeat entries from each defined row
for ($i = 0; $i < $nrows; $i++) {
    # an empty source name means this row is not in use
    $src = $input{"Src$i"};
    if ($src eq "") { next; }

    # always starts with this
    printf SF "\n! Scan set %d\n", $i+1;

    # repeat count -- count is used in overall BLOCKREPEAT
    $rpc = $input{"RpC$i"};
    
    # Set Repeat Gap - keyword for BLOCK
    $rpd = $input{"RpD$i"};
    if ($rpd ne "") {
	printf SF "    BLOCK = '%s' \n", $rpd;
    }
    

    # set source and catalog or ra/dec
    $ref = $input{"Ref$i"};
    if ($ref eq "Cat") {
	printf SF "    SOURCE = '%s'\n", $src;
    } else {
	$ra = $input{"RA$i"};
	$dec = $input{"Dec$i"};
	$epo = $input{"Epo$i"};
	printf SF "    SOURCE = '%s' RA = '%s' Dec = '%s' Epoch = '%s'\n",
							$src, $ra, $dec, $epo;
    }

    # filter and duration sets
    $fil = $input{"Ftr$i"};
    $dur = $input{"Dur$i"};
    printf SF "    FILTER = '%s' DURATION = '%s'\n", $fil, $dur;

    # LST or HA start time.
    $stt = $input{"Stt$i"};
    if ($stt ne "") {
	$lstha = $input{"LstHA$i"};
	if ($lstha eq "HA") {
	    printf SF "    HASTART = '%s'\n", $stt;
	} else {
	    printf SF "    LSTSTART = '%s'\n", $stt;
	}
    }
   
    # compression scale
    $cmp = $input{"Cmp$i"};
    if ($cmp > 0) {
	printf SF "    COMPRESS = '%s'\n", $cmp;
    }

    # comment
    $cmt = $input{"Cmt$i"};
    if ($cmt ne "") {
	printf SF "\n    COMMENT = '%s'\n\n", $cmt;
    }
    # finished with this block
    printf SF "    /\n";
    printf SF "BLOCKREPEAT %d\n", $rpc <= 1 ? 1 : $rpc;
}

# phew
close (SF);

# copy out the schedule file in a <pre></pre> block
print "<p><font color=\"red\" size=6>\nContents of schedule file $schfnb:</font>\n<p><pre>\n";
open (SCHFN, "<$schfn");
while (<SCHFN>) {
    print $_;
}
close (SCHFN);
print "</pre><p>\n";

# execute $chksch to check quality of candidate schedule file
$reply = `rsh -l ccdoper atf $chksch $schfn 2>&1` ;
if ($?)  {
    &errmsg ($reply);
} else {
    printf "<p><b>";
    printf " Your schedule has been successfully submitted"; 
    printf " and assigned reference ID <em>%s</em>.", "$obc$daynr";
    printf " Please make a note of the ID for later reference.\n";
    printf "</b>";
open (SCHFN, "<$schfn");
}
 
wrapup:

# final boilerplate
print <<ENDOFTEXT;
<p>Use your browser's \"Go back\" feature to reedit the same request.
<p>
Go back to the <A href="http://www-astro.physics.uiowa.edu/index.shtml">
ATF Homepage</p>
</A> 

</body></html>
ENDOFTEXT

# print error message in @_ to output, then close SCHFN and unlink $schfn.
sub errmsg {
    local($msg) = @_;
    print "<p><h1><blink>\nUnsuccessful Submission!\n</h1></blink>\n";
    printf "<h1>Error:\n<pre>\n%s\n</pre></h1>\n\n", $msg;
    close (SCHFN);
    unlink ($schfn);
}
